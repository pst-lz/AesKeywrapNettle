var documenterSearchIndex = {"docs":
[{"location":"AesKeywrapNettle.html#The-AesKeywrapNettle-Module.jl","page":"AesKeywrapNettle","title":"The AesKeywrapNettle Module.jl","text":"","category":"section"},{"location":"AesKeywrapNettle.html","page":"AesKeywrapNettle","title":"AesKeywrapNettle","text":"AesKeywrapNettle","category":"page"},{"location":"AesKeywrapNettle.html#Module-Index","page":"AesKeywrapNettle","title":"Module Index","text":"","category":"section"},{"location":"AesKeywrapNettle.html","page":"AesKeywrapNettle","title":"AesKeywrapNettle","text":"Modules = [AesKeywrapNettle]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"AesKeywrapNettle.html#Detailed-API","page":"AesKeywrapNettle","title":"Detailed API","text":"","category":"section"},{"location":"AesKeywrapNettle.html","page":"AesKeywrapNettle","title":"AesKeywrapNettle","text":"Modules = [AesKeywrapNettle]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"AesKeywrapNettle.html#AesKeywrapNettle.aes_unwrap_key","page":"AesKeywrapNettle","title":"AesKeywrapNettle.aes_unwrap_key","text":"aes_unwrap_key(kek, wrapped[, iv])\n\nUnwraps the key \"plaintext\" using the key \"kek\" with the \"Advanced Encryption Standard (AES) Key Wrap Algorithm\" The initial vector \"iv\" is used for integrity check.\n\nArguments\n\nkek::Array{UInt8}: the key-encryption key, possible key lengths for \"kek\" are 128 bit, 192 bit, and 192 bit\nwrapped::Array{UInt8}: the wrapped key (or plaintext) to wrap, the length of \"wrapped\" must be a multiple of 64 bit\niv::Array{UInt8}: the 64-bit initial value used during the wrapping process; If no iv is specified, the default iv [0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6] from rfc3394 is used.\n\nExamples\n\nDocTestSetup = quote\n    using AesKeywrapNettle\nend\n\njulia> b = aes_unwrap_key([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f], [0x1f, 0xa6, 0x8b, 0x0a, 0x81, 0x12, 0xb4, 0x47, 0xae, 0xf3, 0x4b, 0xd8, 0xfb, 0x5a, 0x7b, 0x82, 0x9d, 0x3e, 0x86, 0x23, 0x71, 0xd2, 0xcf, 0xe5], [0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6])\n16-element Vector{UInt8}:\n 0x00\n 0x11\n 0x22\n 0x33\n 0x44\n 0x55\n 0x66\n 0x77\n 0x88\n 0x99\n 0xaa\n 0xbb\n 0xcc\n 0xdd\n 0xee\n 0xff\n\n\n\n\n\n","category":"function"},{"location":"AesKeywrapNettle.html#AesKeywrapNettle.aes_wrap_key","page":"AesKeywrapNettle","title":"AesKeywrapNettle.aes_wrap_key","text":"aes_wrap_key(kek, plaintext[, iv])\n\nWraps the key \"plaintext\" using the key \"kek\" und the initial vector \"iv\" with the \"Advanced Encryption Standard (AES) Key Wrap Algorithm\"\n\nArguments\n\nkek::Array{UInt8}: the key-encryption key, possible key lengths for \"kek\" are 128 bit, 192 bit, and 192 bit\nplaintext::Array{UInt8}: the key (or plaintext) to wrap, the length of \"plaintext\" must be a multiple of 64 bit\niv::Array{UInt8}: the 64-bit initial value used during the wrapping process; If no iv is specified, the default iv [0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6] from rfc3394 is used.\n\nExamples\n\nDocTestSetup = quote\n    using AesKeywrapNettle\nend\n\njulia> a = aes_wrap_key([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f], [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff], [0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6])\n24-element Vector{UInt8}:\n 0x1f\n 0xa6\n 0x8b\n 0x0a\n 0x81\n 0x12\n 0xb4\n 0x47\n 0xae\n 0xf3\n    â‹®\n 0x82\n 0x9d\n 0x3e\n 0x86\n 0x23\n 0x71\n 0xd2\n 0xcf\n 0xe5\n\n\n\n\n\n","category":"function"},{"location":"index.html#AesKeywrapNettle.jl","page":"Index","title":"AesKeywrapNettle.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for AesKeywrapNettle.jl","category":"page"}]
}
